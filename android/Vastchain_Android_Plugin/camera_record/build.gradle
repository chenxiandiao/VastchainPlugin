plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }
}

dependencies {

    implementation rootProject.ext.android.kotlin_core
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    // App compat and UI things
    implementation rootProject.ext.android.appcompt
    implementation rootProject.ext.android.lifecycle
    implementation rootProject.ext.android.constraintlayout

    // The following line is optional, as the core library is included indirectly by camera-camera2
    // CameraX core library
    implementation rootProject.ext.android.camera_core
    // CameraX Camera2 extensions
    implementation rootProject.ext.android.camera_camera2
    // CameraX Lifecycle library
    implementation rootProject.ext.android.camera_lifecycle
    implementation rootProject.ext.android.camera_video
    // If you want to additionally use the CameraX View class
    implementation rootProject.ext.android.camera_view
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            maven(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'ltd.vastchain.android'
                artifactId = 'camera-record'
                version = '1.0'
                // 增加 sourcesJar、javadocJar 任务
                artifact androidSourcesJar
//                artifact javadocJar
            }
        }
        repositories {
            maven {
                //指定要上传的maven私服仓库
                url = "file:\\D:\\maven"
            }
        }
    }
}